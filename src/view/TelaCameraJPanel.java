/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import util.Const;

/**
 *
 * @author anderson
 */
public class TelaCameraJPanel extends javax.swing.JPanel {

    private final Image image;
    private final BaseJFrame baseJFrame;
    private FotoJDialog dialog;

//    private Executor executor = Executors.newSingleThreadExecutor();
//    private AtomicBoolean initialized = new AtomicBoolean(false);
//    private Webcam webcam = null;
//    private WebcamPanel panel = null;
    private int statusCamera; //1 - Entra na Tela; 2 - Tira foto e pausa; 3 - Destrava a camera para tira a foto novamente;
    private BufferedImage princImage;

    /**
     * Creates new form TelaCameraJPanel
     */
    public TelaCameraJPanel(BaseJFrame baseJFrame) {
        this.baseJFrame = baseJFrame;
        initComponents();
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/util/layout_totem.jpg"));
        this.image = imageIcon.getImage();

        dialog = new FotoJDialog(new javax.swing.JFrame(), true, this);
        statusCamera = 1;        

        jPanelCamera.add(this.baseJFrame.getAutomacaoCTR().getWebcamPanel());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonCancelar = new javax.swing.JButton();
        jButtonRetornar = new javax.swing.JButton();
        jLabelMsg = new javax.swing.JLabel();
        jPanelCamera = new javax.swing.JPanel();
        jButtonCapturarFoto = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jButtonCancelar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButtonCancelar.setForeground(new java.awt.Color(28, 88, 199));
        jButtonCancelar.setText("CANCELAR");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weighty = -20.0;
        add(jButtonCancelar, gridBagConstraints);

        jButtonRetornar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonRetornar.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButtonRetornar.setForeground(new java.awt.Color(28, 88, 199));
        jButtonRetornar.setText("RETORNAR");
        jButtonRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRetornarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weighty = -20.0;
        add(jButtonRetornar, gridBagConstraints);

        jLabelMsg.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelMsg.setForeground(new java.awt.Color(255, 255, 255));
        jLabelMsg.setText("Posicione-se corretamente para a autenticação.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabelMsg, gridBagConstraints);

        javax.swing.GroupLayout jPanelCameraLayout = new javax.swing.GroupLayout(jPanelCamera);
        jPanelCamera.setLayout(jPanelCameraLayout);
        jPanelCameraLayout.setHorizontalGroup(
            jPanelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelCameraLayout.setVerticalGroup(
            jPanelCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 640;
        gridBagConstraints.ipady = 480;
        add(jPanelCamera, gridBagConstraints);

        jButtonCapturarFoto.setBackground(new java.awt.Color(255, 255, 255));
        jButtonCapturarFoto.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButtonCapturarFoto.setForeground(new java.awt.Color(28, 88, 199));
        jButtonCapturarFoto.setText("CAPTURAR");
        jButtonCapturarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCapturarFotoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jButtonCapturarFoto, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed

        this.baseJFrame.mudarTela(Const.TELA_CPF);

    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonCapturarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCapturarFotoActionPerformed

        capturar();

    }//GEN-LAST:event_jButtonCapturarFotoActionPerformed

    private void jButtonRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRetornarActionPerformed

        this.baseJFrame.retornarTela();
        
    }//GEN-LAST:event_jButtonRetornarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonCapturarFoto;
    private javax.swing.JButton jButtonRetornar;
    private javax.swing.JLabel jLabelMsg;
    private javax.swing.JPanel jPanelCamera;
    // End of variables declaration//GEN-END:variables

    private void capturar() {
        statusCamera = 2;
        princImage = this.baseJFrame.getAutomacaoCTR().getWebcam().getImage();
        jPanelCamera.removeAll();
        jPanelCamera.add(new JLabel((new ImageIcon(princImage))));
        dialog.setVisible(true);
    }

    public void descartarFoto() {
        statusCamera = 3;
        this.baseJFrame.getAutomacaoCTR().getWebcamPanel().resume();
        jPanelCamera.removeAll();
        jPanelCamera.add(this.baseJFrame.getAutomacaoCTR().getWebcamPanel());
    }

    public void salvarFoto() {

        if (statusCamera == 2) {

            try {
                
                this.baseJFrame.getAutomacaoCTR().salvarDadosCarreg();
                
//                ImageIO.write(princImage, "GIF", new File("K:\\Foto_pre_ordcarreg\\" + this.baseJFrame.getAutomacaoCTR().getIdCarreg() + ".gif"));
                ImageIO.write(princImage, "GIF", new File("K:\\Foto_pre_ordcarreg\\PRD\\" + this.baseJFrame.getAutomacaoCTR().getIdCarreg() + ".gif"));

                BufferedImage image = this.baseJFrame.getAutomacaoCTR().getWebcam().getImage();
//                ImageIO.write(image, "GIF", new File("K:\\Foto_pre_ordcarreg\\" + this.baseJFrame.getAutomacaoCTR().getIdCarreg() + "_01.gif"));
                ImageIO.write(image, "GIF", new File("K:\\Foto_pre_ordcarreg\\PRD\\" + this.baseJFrame.getAutomacaoCTR().getIdCarreg() + "_01.gif"));
                this.baseJFrame.getAutomacaoCTR().getWebcamPanel().resume();

                jPanelCamera.removeAll();
                jPanelCamera.add(this.baseJFrame.getAutomacaoCTR().getWebcamPanel());

                this.baseJFrame.mudarTela(Const.TELA_IMPRIMIR_SENHA);

            } catch (Exception ex) {
                System.out.println("Erro: " + ex);
            }

        } else {
            JOptionPane.showConfirmDialog(null, "Por favor, tire uma foto para averiguação.");
        }

    }

    @Override
    public Dimension getPreferredSize() {
        Dimension superSize = super.getPreferredSize();
        if (isPreferredSizeSet() || image == null) {
            return superSize;
        }
        int prefW = Math.max(image.getWidth(null), superSize.width);
        int prefH = Math.max(image.getHeight(null), superSize.height);
        return new Dimension(prefW, prefH);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (image != null) {
            g.drawImage(image, 0, 0, null);
        }
    }

}
